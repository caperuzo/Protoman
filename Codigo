using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class MegamanMovement : MonoBehaviour
{
    // Velocidad del personaje
    public float Speed;

    // Fuerza del salto
    public float JumpForce;

    // Prefab de la bala que dispara el personaje
    public GameObject BulletPrefab;

    // Componentes privados
    private Rigidbody2D Rigidbody2D;
    private Animator Animator;

    // Variables de estado del personaje
    private float Horizontal;
    private bool Grounded;
    private float LastShoot;
    private int Health = 5;

    private void Start()
    {
        // Obtener componentes del objeto
        Rigidbody2D = GetComponent<Rigidbody2D>();
        Animator = GetComponent<Animator>();
    }

    private void Update()
    {
        // Movimiento horizontal
        Horizontal = Input.GetAxisRaw("Horizontal");

        // Cambiar dirección del personaje según su movimiento
        if (Horizontal < 0.0f) transform.localScale = new Vector3(-1.0f, 1.0f, 1.0f);
        else if (Horizontal > 0.0f) transform.localScale = new Vector3(1.0f, 1.0f, 1.0f);

        
        
        // Animación de correr
        Animator.SetBool("running", Horizontal != 0.0f);
        Animator.SetBool("shooting", Horizontal != 0.0f)

        // Animación de correr y saltar
        

        // Detección de suelo
        //Debug.DrawRay(transform.position, Vector3.down * 0.1f, Color.red);
        if (Physics2D.Raycast(transform.position, Vector3.down, 0.1f))
        {
            Grounded = true;
        }
        else Grounded = false;

        // Salto se le agrega grounded porque solo se puede saltar si estas en grounded = suelo
        if (Input.GetKeyDown(KeyCode.W) && Grounded)
        {
            Jump();
        }

        // Disparo
        if (Input.GetKey(KeyCode.Space) && Time.time > LastShoot + 0.25f)
        {
            Shoot();
            LastShoot = Time.time;
        }
    }

    private void FixedUpdate()
    {
        // Movimiento horizontal continuo
        Rigidbody2D.velocity = new Vector2(Horizontal * Speed, Rigidbody2D.velocity.y);
        
        Animator.SetBool("Grounded", Grounded);
    }

    // Función para saltar
    private void Jump()
    {
        Rigidbody2D.AddForce(Vector2.up * JumpForce);
    }

    // Función para disparar
    private void Shoot()
    {
        Vector3 direction;
        if (transform.localScale.x == 1.0f) direction = Vector3.right;
        else direction = Vector3.left;

        // Crear bala y asignar su dirección
        GameObject bullet = Instantiate(BulletPrefab, transform.position + direction * 0.1f, Quaternion.identity);
        bullet.GetComponent<BulletScript>().SetDirection(direction);
    }

    // Función para reducir la salud del personaje
    public void Hit()
    {
        Health -= 1;
        if (Health == 0) Destroy(gameObject);
    }
}
